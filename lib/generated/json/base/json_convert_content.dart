// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:feed/page/zhihu/bean/zhihu_entity.dart';
import 'package:feed/generated/json/zhihu_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {			case ZhihuEntity:
			return zhihuEntityFromJson(data as ZhihuEntity, json) as T;			case ZhihuFeedSpecific:
			return zhihuFeedSpecificFromJson(data as ZhihuFeedSpecific, json) as T;			case ZhihuTarget:
			return zhihuTargetFromJson(data as ZhihuTarget, json) as T;			case ZhihuTargetTitleArea:
			return zhihuTargetTitleAreaFromJson(data as ZhihuTargetTitleArea, json) as T;			case ZhihuTargetExcerptArea:
			return zhihuTargetExcerptAreaFromJson(data as ZhihuTargetExcerptArea, json) as T;			case ZhihuTargetImageArea:
			return zhihuTargetImageAreaFromJson(data as ZhihuTargetImageArea, json) as T;			case ZhihuTargetMetricsArea:
			return zhihuTargetMetricsAreaFromJson(data as ZhihuTargetMetricsArea, json) as T;			case ZhihuTargetLabelArea:
			return zhihuTargetLabelAreaFromJson(data as ZhihuTargetLabelArea, json) as T;			case ZhihuTargetLink:
			return zhihuTargetLinkFromJson(data as ZhihuTargetLink, json) as T;    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
		switch (type) {			case ZhihuEntity:
			return zhihuEntityToJson(data as ZhihuEntity);			case ZhihuFeedSpecific:
			return zhihuFeedSpecificToJson(data as ZhihuFeedSpecific);			case ZhihuTarget:
			return zhihuTargetToJson(data as ZhihuTarget);			case ZhihuTargetTitleArea:
			return zhihuTargetTitleAreaToJson(data as ZhihuTargetTitleArea);			case ZhihuTargetExcerptArea:
			return zhihuTargetExcerptAreaToJson(data as ZhihuTargetExcerptArea);			case ZhihuTargetImageArea:
			return zhihuTargetImageAreaToJson(data as ZhihuTargetImageArea);			case ZhihuTargetMetricsArea:
			return zhihuTargetMetricsAreaToJson(data as ZhihuTargetMetricsArea);			case ZhihuTargetLabelArea:
			return zhihuTargetLabelAreaToJson(data as ZhihuTargetLabelArea);			case ZhihuTargetLink:
			return zhihuTargetLinkToJson(data as ZhihuTargetLink);    }
    return data as T;
  }
  //Go back to a single instance by type
  static _fromJsonSingle(String type, json) {
    switch (type) {			case 'ZhihuEntity':
			return ZhihuEntity().fromJson(json);			case 'ZhihuFeedSpecific':
			return ZhihuFeedSpecific().fromJson(json);			case 'ZhihuTarget':
			return ZhihuTarget().fromJson(json);			case 'ZhihuTargetTitleArea':
			return ZhihuTargetTitleArea().fromJson(json);			case 'ZhihuTargetExcerptArea':
			return ZhihuTargetExcerptArea().fromJson(json);			case 'ZhihuTargetImageArea':
			return ZhihuTargetImageArea().fromJson(json);			case 'ZhihuTargetMetricsArea':
			return ZhihuTargetMetricsArea().fromJson(json);			case 'ZhihuTargetLabelArea':
			return ZhihuTargetLabelArea().fromJson(json);			case 'ZhihuTargetLink':
			return ZhihuTargetLink().fromJson(json);    }
    return null;
  }

  //empty list is returned by type
  static _getListFromType(String type) {
    switch (type) {			case 'ZhihuEntity':
			return List<ZhihuEntity>();			case 'ZhihuFeedSpecific':
			return List<ZhihuFeedSpecific>();			case 'ZhihuTarget':
			return List<ZhihuTarget>();			case 'ZhihuTargetTitleArea':
			return List<ZhihuTargetTitleArea>();			case 'ZhihuTargetExcerptArea':
			return List<ZhihuTargetExcerptArea>();			case 'ZhihuTargetImageArea':
			return List<ZhihuTargetImageArea>();			case 'ZhihuTargetMetricsArea':
			return List<ZhihuTargetMetricsArea>();			case 'ZhihuTargetLabelArea':
			return List<ZhihuTargetLabelArea>();			case 'ZhihuTargetLink':
			return List<ZhihuTargetLink>();    }
    return null;
  }

  static M fromJsonAsT<M>(json) {
    String type = M.toString();
    if (json is List && type.contains("List<")) {
      String itemType = type.substring(5, type.length - 1);
      List tempList = _getListFromType(itemType);
      json.forEach((itemJson) {
        tempList
            .add(_fromJsonSingle(type.substring(5, type.length - 1), itemJson));
      });
      return tempList as M;
    } else {
      return _fromJsonSingle(M.toString(), json) as M;
    }
  }
}